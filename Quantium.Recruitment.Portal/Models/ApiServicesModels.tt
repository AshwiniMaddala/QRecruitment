<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime.Serialization" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)Quantium.Recruitment.ApiServices\$(OutDir)Quantium.Recruitment.ApiServices.dll" #>
<#@ template language="C#" #>

using System;
using System.Collections.Generic;
namespace Quantium.Recruitment.ApiServiceModels {

<# 

	var assemblyInfo = typeof(Quantium.Recruitment.ApiServices.AssemblyReferenceType).Assembly;
	Type[] typelist = GetTypesInNamespace(assemblyInfo, "Quantium.Recruitment.ApiServices.Models");
	for (int i = 0; i < typelist.Length; i++)
	{
		WriteLine("     public class " + typelist[i].Name + " { ");
		
		var members = typelist[i].GetMembers().Where(t => t.MemberType == MemberTypes.Property);
		var memberNames = members.Select(m => m.Name).ToList();

		Func<MemberInfo, string> getdeclaration =
            memberInfo =>
            {
                var propertyType = ((PropertyInfo)memberInfo).PropertyType;
                var result = 
                    propertyType.IsGenericType ? 
                    GetGenericType(propertyType, propertyType.GenericTypeArguments.First().Name):
                    GetMemberDeclarationType(propertyType);


                if (result == string.Empty)
                    result = propertyType.FullName.Split('.').Last();
				return result;
            };

		var membersTypes = members.Select(m => getdeclaration(m)).ToList();
		
		
		for (int j = 0; j < members.Count(); j++)
        {
			WriteLine("        public " + membersTypes[j] + " " + memberNames[j] + ";");
        }

		WriteLine("");
		WriteLine("    }"); // end of each class
		WriteLine("");
	}

	WriteLine("}"); // end of namespace

#>

<#+
	private static string GetGenericType(Type type, string propertyName)
    {
        if (type.Name == "List`1")
            return "List<" + propertyName + ">";

        return propertyName + "[]";
    }

	private Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
	{
		return assembly.GetTypes().Where(t => String.Equals(t.Namespace, nameSpace, StringComparison.Ordinal)).ToArray();
	}

	private static string GetMemberDeclarationType(Type type)
	{
			switch(type.Name){
				case "Int64": return "long";
				case "Boolean": return "bool";
				case "String": return "string";
				default: return type.Name;
			}
			
            
	}
#>

